{"version":3,"file":"inject_ai.min.js","sources":["../src/inject_ai.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\nexport const init = (token) => {\n    if (!token) {\n        return;\n    }\n\n    Ajax.call([{\n        methodname: 'local_assign_ai_get_details',\n        args: { token: token },\n    }])[0].done(data => {\n        const message = data.message;\n        const rubricResponse = data.rubric_response;\n        const grade = data.grade; // Calificación simple si no hay rúbrica\n\n        const injectMessage = () => {\n            const textarea = document.querySelector('#id_assignfeedbackcomments_editor, textarea[id^=\"id_feedbackcomments_\"]');\n\n            if (!textarea) {\n                return false;\n            }\n\n            textarea.value = message;\n\n            // TinyMCE\n            if (window.tinymce && window.tinymce.get(textarea.id)) {\n                window.tinymce.get(textarea.id).setContent(message);\n                return true;\n            }\n\n            // Atto\n            if (window.M && window.M.editor_atto && window.M.editor_atto.getEditorForElement) {\n                const editor = window.M.editor_atto.getEditorForElement(textarea);\n                if (editor) {\n                    editor.setHTML(message);\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        const injectRubric = () => {\n            if (!rubricResponse) {\n                return false;\n            }\n\n            let rubricData;\n            try {\n                rubricData = typeof rubricResponse === 'string'\n                    ? JSON.parse(rubricResponse)\n                    : rubricResponse;\n            } catch (e) {\n                Notification.addNotification({\n                    message: 'Error parsing rubric_response: ' + e.message,\n                    type: 'error'\n                });\n                return false;\n            }\n\n            if (!Array.isArray(rubricData)) {\n                Notification.addNotification({\n                    message: 'rubric_response debe ser un array',\n                    type: 'error'\n                });\n                return false;\n            }\n\n            let injected = false;\n\n            // Función para normalizar strings (eliminar tildes y espacios extra)\n            const normalizeString = (str) => {\n                return str\n                    .normalize('NFD')\n                    .replace(/[\\u0300-\\u036f]/g, '')\n                    .toLowerCase()\n                    .trim();\n            };\n\n            // Iterar sobre cada criterio\n            rubricData.forEach(criterionData => {\n                const criterionName = criterionData.criterion;\n                const targetPoints = criterionData.levels[0].points;\n                const comment = criterionData.levels[0].comment;\n\n                // Buscar todos los criterios en la tabla\n                const criterionRows = document.querySelectorAll('tr.criterion');\n\n                criterionRows.forEach(row => {\n                    // Obtener el nombre del criterio desde la celda description\n                    const descriptionCell = row.querySelector('td.description');\n                    if (!descriptionCell) {\n                        return;\n                    }\n\n                    const rowCriterionName = descriptionCell.textContent.trim();\n\n                    // Comparar nombres normalizados (sin tildes, case-insensitive)\n                    if (normalizeString(rowCriterionName) === normalizeString(criterionName)) {\n                        // Buscar el nivel con los puntos correctos\n                        const levelCells = row.querySelectorAll('td.level');\n\n                        levelCells.forEach(levelCell => {\n                            const scoreSpan = levelCell.querySelector('.scorevalue');\n                            if (!scoreSpan) {\n                                return;\n                            }\n\n                            const points = parseInt(scoreSpan.textContent.trim());\n\n                            // Si coinciden los puntos, seleccionar este nivel\n                            if (points === targetPoints) {\n                                const radioInput = levelCell.querySelector('input[type=\"radio\"]');\n                                if (radioInput) {\n                                    radioInput.checked = true;\n\n                                    // Actualizar aria-checked en el td\n                                    levelCell.setAttribute('aria-checked', 'true');\n\n                                    // Remover aria-checked de otros niveles\n                                    levelCells.forEach(otherCell => {\n                                        if (otherCell !== levelCell) {\n                                            otherCell.setAttribute('aria-checked', 'false');\n                                        }\n                                    });\n\n                                    injected = true;\n                                }\n                            }\n                        });\n\n                        // Inyectar comentario en el textarea de remark\n                        const remarkTextarea = row.querySelector('td.remark textarea');\n                        if (remarkTextarea && comment) {\n                            remarkTextarea.value = comment;\n                            injected = true;\n                        }\n                    }\n                });\n            });\n\n            return injected;\n        };\n\n        const injectSimpleGrade = () => {\n            // Solo intentar si no hay rúbrica y hay una calificación\n            if (rubricResponse || !grade) {\n                return false;\n            }\n\n            // Buscar el campo de calificación simple\n            const gradeInput = document.querySelector('#id_grade, input[name=\"grade\"]');\n\n            if (!gradeInput) {\n                return false;\n            }\n\n            gradeInput.value = grade;\n\n            // Disparar evento change para que Moodle detecte el cambio\n            const event = new Event('change', { bubbles: true });\n            gradeInput.dispatchEvent(event);\n\n            return true;\n        };\n\n        // Intentar inyectar con reintentos\n        let attempts = 0;\n        const interval = setInterval(() => {\n            attempts++;\n            const messageInjected = injectMessage();\n            const rubricInjected = injectRubric();\n            const gradeInjected = injectSimpleGrade();\n\n            if ((messageInjected || rubricInjected || gradeInjected) || attempts > 20) {\n                clearInterval(interval);\n\n                if (rubricInjected) {\n                    Notification.addNotification({\n                        message: 'Rúbrica inyectada exitosamente',\n                        type: 'success'\n                    });\n                } else if (gradeInjected) {\n                    Notification.addNotification({\n                        message: 'Calificación inyectada exitosamente',\n                        type: 'success'\n                    });\n                } else if (attempts > 20) {\n                    Notification.addNotification({\n                        message: 'No se pudo inyectar la rúbrica después de 20 intentos',\n                        type: 'warning'\n                    });\n                }\n            }\n        }, 500);\n    }).fail(Notification.exception);\n};\n"],"names":["token","call","methodname","args","done","data","message","rubricResponse","rubric_response","grade","attempts","interval","setInterval","messageInjected","textarea","document","querySelector","value","window","tinymce","get","id","setContent","M","editor_atto","getEditorForElement","editor","setHTML","injectMessage","rubricInjected","rubricData","JSON","parse","e","addNotification","type","Array","isArray","injected","normalizeString","str","normalize","replace","toLowerCase","trim","forEach","criterionData","criterionName","criterion","targetPoints","levels","points","comment","querySelectorAll","row","descriptionCell","rowCriterionName","textContent","levelCells","levelCell","scoreSpan","parseInt","radioInput","checked","setAttribute","otherCell","remarkTextarea","injectRubric","gradeInjected","gradeInput","event","Event","bubbles","dispatchEvent","injectSimpleGrade","clearInterval","fail","Notification","exception"],"mappings":"4XAGqBA,QACZA,qBAIAC,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CAAEH,MAAOA,UACf,GAAGI,MAAKC,aACFC,QAAUD,KAAKC,QACfC,eAAiBF,KAAKG,gBACtBC,MAAQJ,KAAKI,UA0JfC,SAAW,QACTC,SAAWC,aAAY,KACzBF,iBACMG,gBA3JY,YACZC,SAAWC,SAASC,cAAc,+EAEnCF,gBACM,KAGXA,SAASG,MAAQX,QAGbY,OAAOC,SAAWD,OAAOC,QAAQC,IAAIN,SAASO,WAC9CH,OAAOC,QAAQC,IAAIN,SAASO,IAAIC,WAAWhB,UACpC,KAIPY,OAAOK,GAAKL,OAAOK,EAAEC,aAAeN,OAAOK,EAAEC,YAAYC,oBAAqB,OACxEC,OAASR,OAAOK,EAAEC,YAAYC,oBAAoBX,aACpDY,cACAA,OAAOC,QAAQrB,UACR,SAIR,GAmIiBsB,GAClBC,eAjIW,UACZtB,sBACM,MAGPuB,eAEAA,WAAuC,iBAAnBvB,eACdwB,KAAKC,MAAMzB,gBACXA,eACR,MAAO0B,gCACQC,gBAAgB,CACzB5B,QAAS,kCAAoC2B,EAAE3B,QAC/C6B,KAAM,WAEH,MAGNC,MAAMC,QAAQP,yCACFI,gBAAgB,CACzB5B,QAAS,oCACT6B,KAAM,WAEH,MAGPG,UAAW,QAGTC,gBAAmBC,KACdA,IACFC,UAAU,OACVC,QAAQ,mBAAoB,IAC5BC,cACAC,cAITd,WAAWe,SAAQC,sBACTC,cAAgBD,cAAcE,UAC9BC,aAAeH,cAAcI,OAAO,GAAGC,OACvCC,QAAUN,cAAcI,OAAO,GAAGE,QAGlBrC,SAASsC,iBAAiB,gBAElCR,SAAQS,YAEZC,gBAAkBD,IAAItC,cAAc,sBACrCuC,6BAICC,iBAAmBD,gBAAgBE,YAAYb,UAGjDL,gBAAgBiB,oBAAsBjB,gBAAgBQ,eAAgB,OAEhEW,WAAaJ,IAAID,iBAAiB,YAExCK,WAAWb,SAAQc,kBACTC,UAAYD,UAAU3C,cAAc,kBACrC4C,WAIUC,SAASD,UAAUH,YAAYb,UAG/BK,aAAc,OACnBa,WAAaH,UAAU3C,cAAc,uBACvC8C,aACAA,WAAWC,SAAU,EAGrBJ,UAAUK,aAAa,eAAgB,QAGvCN,WAAWb,SAAQoB,YACXA,YAAcN,WACdM,UAAUD,aAAa,eAAgB,YAI/C1B,UAAW,aAMjB4B,eAAiBZ,IAAItC,cAAc,sBACrCkD,gBAAkBd,UAClBc,eAAejD,MAAQmC,QACvBd,UAAW,UAMpBA,UA8BgB6B,GACjBC,cA5BgB,SAElB7D,iBAAmBE,aACZ,QAIL4D,WAAatD,SAASC,cAAc,sCAErCqD,kBACM,EAGXA,WAAWpD,MAAQR,YAGb6D,MAAQ,IAAIC,MAAM,SAAU,CAAEC,SAAS,WAC7CH,WAAWI,cAAcH,QAElB,GASeI,IAEjB7D,iBAAmBgB,gBAAkBuC,eAAkB1D,SAAW,MACnEiE,cAAchE,UAEVkB,qCACaK,gBAAgB,CACzB5B,QAAS,iCACT6B,KAAM,YAEHiC,oCACMlC,gBAAgB,CACzB5B,QAAS,sCACT6B,KAAM,YAEHzB,SAAW,0BACLwB,gBAAgB,CACzB5B,QAAS,wDACT6B,KAAM,eAInB,QACJyC,KAAKC,sBAAaC"}